package nl.tudelft.sem.template.example.services;

import javassist.NotFoundException;
import nl.tudelft.sem.template.example.database.BookRepository;
import nl.tudelft.sem.template.example.database.BookWrapperRepository;
import lombok.Getter;
import nl.tudelft.sem.template.example.database.BookshelfRepository;
import nl.tudelft.sem.template.example.database.UserRepository;
import nl.tudelft.sem.template.example.entities.BookWrapperId;
import nl.tudelft.sem.template.example.strategy_pattern.SortByAuthorsStrategy;
import nl.tudelft.sem.template.example.strategy_pattern.SortByPagesStrategy;
import nl.tudelft.sem.template.example.strategy_pattern.SortByTitlesStrategy;
import nl.tudelft.sem.template.example.strategy_pattern.SortingStrategy;
import nl.tudelft.sem.template.model.*;
import nl.tudelft.sem.template.example.exceptions.InvalidDataException;
import nl.tudelft.sem.template.example.exceptions.NullException;
import nl.tudelft.sem.template.example.exceptions.ValidationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

@Service
public class UserService {

    @Getter
    private final UserRepository userRepository;
    private final BookshelfRepository bookshelfRepository;
    private final BookRepository catalog;
    private final BookWrapperRepository bookWrapperRepository;

    private final UtilityService util;
    private final CategoryService categoryService;

    private SortingStrategy sortingStrategy;

    private boolean simulateError = false;

    @Autowired
    public UserService(UserRepository userRepository, BookshelfRepository bookshelfRepository,
                       BookRepository catalog, BookWrapperRepository bookWrapperRepository,
                       CategoryService categoryService, UtilityService util) {
        this.userRepository = userRepository;
        this.bookshelfRepository = bookshelfRepository;
        this.catalog = catalog;
        this.bookWrapperRepository = bookWrapperRepository;
        this.categoryService = categoryService;
        this.util = util;
    }

    /**
     * Method that decides if we're simulating an ISE or not
     *
     * @param simulateError true if we want to simulate an ISE, false otherwise
     */
    public void setSimulateError(boolean simulateError) {
        this.simulateError = simulateError;
    }

    /**
     * Method that gets all the stored users
     *
     * @return a list of all the users and their details stored in the database
     */
    public List<User> getAll() {
        return userRepository.findAll();
    }

    /**
     * Method that finds the details about a user in the database
     *
     * @param id the id of the user we are looking for
     * @return the corresponding user entity , with all of its data
     * @throws NotFoundException no user with such id is stored in our database
     */
    public User findById(UUID id) throws NullException, NotFoundException {
        if (id == null)
            throw new NullException("User id null");

        return userRepository.findById(id).orElseThrow(() -> new NotFoundException("User with id " + id + " not found"));
    }

    /**
     * Method that checks if there is a user with the specified id in the database
     *
     * @param id the id of the user we are looking for
     * @return true if there is such a user, false otherwise
     */
    public boolean existsById(UUID id) {
        if (id == null)
            throw new IllegalArgumentException("User id null");

        return userRepository.existsById(id);
    }

    /**
     * Method for adding a user to the repository. This method also creates all the user's default categories
     * The id is not autogenerated as we should get it from the user microservice.
     *
     * @param userId the id of the new user
     */
    public void addUser(UUID userId) throws Exception {
        if (!util.validId(userId))
            throw new InvalidDataException("User UUID is invalid");

        User user = new User(userId);
        userRepository.save(user);

        try {
            categoryService.createDefaultCategories(userId);
        } catch (NotFoundException | ValidationException e) {
            throw new Exception("Something went wrong when creating the user");
        }
    }

    /**
     * Method that deletes a user from the database and all the entities belonging to that user.
     *
     * @param userId the id of the user being deleted
     * @throws NotFoundException thrown if user with specified id does not exist in the database
     */
    public void deleteUser(UUID userId) throws NotFoundException, NullException, ValidationException {
        User user = findById(userId);
        categoryService.deleteUser(userId);
        userRepository.delete(user);
    }

    public boolean isUserOwnerOfBookshelf(UUID userId, UUID bookshelfId) throws NotFoundException {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty())
            throw new NotFoundException("User with id " + userId + " not found");
        User user = userOpt.get();

        Optional<Bookshelf> bookshelfOpt = bookshelfRepository.findById(bookshelfId);
        if (bookshelfOpt.isEmpty())
            throw new NotFoundException("Bookshelf with id " + bookshelfId + " not found");
        Bookshelf bookshelf = bookshelfOpt.get();

        return bookshelf.getOwner().equals(user);
    }

    /**
     * Update number of pages read by user in a book
     *
     * @param userId the id of the user
     * @param bookId the id of the book
     * @param pages  the number of pages read
     */
    public int updateCurrentPage(UUID userId, UUID bookId, Integer pages) throws Exception {
        if (simulateError) {
            throw new Exception();
        }
        Book theBook = catalog.findById(bookId).orElseThrow(() -> new NotFoundException("Book not found"));
        if (pages <= 0 || pages > theBook.getNumPages()) {
            throw new InvalidDataException("");
        }

        BookWrapper book = getBookWrapper(userId, bookId);

        book.setCurrentPage(pages);
        bookWrapperRepository.save(book);

        return pages;
    }

    /**
     * Get number of pages read by user in a book
     *
     * @param userId the id of the user
     * @param bookId the id of the book
     * @return the number of pages read
     */
    public Integer getCurrentPage(UUID userId, UUID bookId) throws Exception {
        if (simulateError) {
            throw new Exception();
        }

        BookWrapper book = getBookWrapper(userId, bookId);

        return book.getCurrentPage();
    }

    /**
     * Method that gets the reading status of a book, for a specific user
     *
     * @param userId the user whose book status we are looking for
     * @param bookId the id of the book whose status we are looking for
     * @return the status of the book, in string format
     * @throws InvalidDataException if UUID's are null or invalid
     * @throws NotFoundException    if there is no book wrapper (user has not yet added the book to any bookshelf)
     */
    public String getReadingStatus(UUID userId, UUID bookId) throws InvalidDataException, NotFoundException {
        BookWrapper bookWrapper = getBookWrapper(userId, bookId);
        BookWrapper.ReadingStatusEnum status = bookWrapper.getReadingStatus();
        if (status == null) return "NONE";
        return status.getValue();
    }

    /**
     * Method that sets the reading status of a book for a specific user
     *
     * @param userId        the id of the user who wants to update their reading status
     * @param bookId        the id of the book whose status we want to update
     * @param readingStatus the status we want so set (must be one defined in ReadingStatusEnum in the BookWrapper class)
     * @return the new reading status as a string
     * @throws InvalidDataException if the ids are null, or the reading status string is invalid
     * @throws NotFoundException    if there is no such user, book, or if the book has not been yet added to a bookshelf and has no wrapper
     */
    public String setReadingStatus(UUID userId, UUID bookId, String readingStatus) throws InvalidDataException, NotFoundException {
        BookWrapper bookWrapper = getBookWrapper(userId, bookId);
        // needed because if you put "READING" in the body like in the YAML
        // the quotes don't get cut off, it just sends ""READING""
        try {
            readingStatus = readingStatus.trim().replace("\"", "").toUpperCase();
            bookWrapper.setReadingStatus(BookWrapper.ReadingStatusEnum.fromValue(readingStatus));
        } catch (IllegalArgumentException | NullPointerException e) {
            throw new InvalidDataException("Reading status must be one of the predetermined types");
        }
        bookWrapperRepository.save(bookWrapper);

        return bookWrapper.getReadingStatus().getValue();
    }

    /**
     * Private method for getting the wrapper of a book for a user
     *
     * @param userId the id of the user we are looking for
     * @param bookId the id of the book whose details we want
     * @return BookWrapper object containing the corresponding details for the user
     * @throws InvalidDataException if the ids are null or invalid
     * @throws NotFoundException    if the user or book do not exist, or if the user has not added the book to a bookshelf yet (no wrapper)
     */
    private BookWrapper getBookWrapper(UUID userId, UUID bookId) throws InvalidDataException, NotFoundException {
        if (!util.validId(userId) || !util.validId(bookId)) {
            throw new InvalidDataException("Null or invalid id's");
        }

        if (!userRepository.existsById(userId) || !catalog.existsById(bookId)) {
            throw new NotFoundException("User or book do not exist");
        }

        BookWrapperId bookWrapperId = new BookWrapperId(bookId, userId);
        return bookWrapperRepository.findById(bookWrapperId).orElseThrow(() -> new NotFoundException("BookWrapper not found"));
    }

    /**
     * Sort all books in a bookshelf
     *
     * @param userId      the id of the user
     * @param bookshelfId the id of the bookshelf
     * @param order       the order in which the books should be sorted
     * @return the list of books in the bookshelf
     * @throws Exception for testing purposes
     */
    public List<BookWrapper> sortBooks(UUID userId, UUID bookshelfId, String order) throws Exception {
        if (simulateError) {
            throw new Exception();
        }

        if (!util.validId(userId) || !util.validId(bookshelfId)) {
            // 400: Bad Request.
            throw new IllegalArgumentException();
        }

        if (!userRepository.existsById(userId) || !bookshelfRepository.existsById(bookshelfId)) {
            // 404: Not Found.
            throw new NotFoundException("");
        }

        Bookshelf bookshelf = bookshelfRepository.findById(bookshelfId).orElseThrow(() -> new NotFoundException("BookWrapper not found"));
        List<BookWrapper> books = bookshelf.getBooks().stream().map(book -> {
                    BookWrapperId id = new BookWrapperId(book.getBookId(), userId);
                    return bookWrapperRepository.findById(id).get();
                })
                .collect(Collectors.toList());

        checkSortingStrategy(order);
        return sortingStrategy.sort(books, catalog);
    }

    /**
     * Method that checks if the order is valid and sets the sorting strategy accordingly
     *
     * @param order the order in which the books should be sorted
     */
    public void checkSortingStrategy(String order) {
        if (order.toLowerCase().contains("title")) {
            sortingStrategy = new SortByTitlesStrategy();
        } else if (order.toLowerCase().contains("author")) {
            sortingStrategy = new SortByAuthorsStrategy();
        } else if (order.toLowerCase().contains("pages")) {
            sortingStrategy = new SortByPagesStrategy();
        } else {
            throw new IllegalArgumentException("Invalid sorting order");
        }
    }

    /**
     * Gets the three most preferred genres of a user, if genres have
     * equal frequency, they are sorted by name ascending ly.
     *
     * @param userId the id of the user
     * @return List of genres with on position 0 the most frequent one
     * @throws Exception if the user doesn't exist
     */
    public List<String> getPreferredGenres(UUID userId) throws Exception {
        boolean exists = existsById(userId);
        if (!exists) {
            throw new NotFoundException("User with id " + userId + " not found");
        }
        List<Bookshelf> bookshelves = bookshelfRepository.findByOwnerId(userId);
        return bookshelves.stream()
                .map(Bookshelf::getBooks)
                .flatMap(Collection::stream)
                .map(Book::getGenres)
                .flatMap(Collection::stream)
                .map(Book.GenresEnum::getValue)
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))
                .entrySet().stream()
                .sorted((e1, e2) -> {
                    int compare = e2.getValue().compareTo(e1.getValue());
                    return compare != 0 ? compare : e1.getKey().compareTo(e2.getKey());
                })
                .limit(3)
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());
    }

    /**
     * Get the amount of books read for a user, a book is considered
     * read if it's in a shelf that has the category "Read books"
     *
     * @param userId the id of the user who to find the amount for
     * @return the number of books read
     * @throws Exception if the user doesn't exist
     */
    public int getNumberOfBooksRead(UUID userId) throws Exception {
        boolean exists = existsById(userId);
        if (!exists) {
            throw new NotFoundException("User with id " + userId + " not found");
        }

        List<BookWrapper> wrappers = bookWrapperRepository.findByUserId(userId);

        int temp = wrappers.size();
        if (temp == 0) {
            return 0;
        }
        return (int) wrappers.stream()
                .filter(x -> x.getReadingStatus() != null)
                .filter(x -> x.getReadingStatus().equals(BookWrapper.ReadingStatusEnum.READ))
                .count();
    }

    /**
     * Gets all the shelves that are owned by the user.
     *
     * @param ownerId The user id for whom to search their shelves.
     * @return The list of bookshelves owned by the user.
     * @throws NotFoundException
     */
    public List<Bookshelf> getByOwner(UUID ownerId) throws NotFoundException {
        boolean userExists = existsById(ownerId);
        if (!userExists) {
            throw new NotFoundException("User with id " + ownerId + " not found");
        }
        List<Bookshelf> bookshelves = bookshelfRepository.findByOwnerId(ownerId);
        if (bookshelves.isEmpty()) {
            throw new EmptyResultDataAccessException(0);
        }
        return bookshelves;
    }
}
